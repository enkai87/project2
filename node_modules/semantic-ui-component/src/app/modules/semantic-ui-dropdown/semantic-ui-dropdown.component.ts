import {
  AfterViewInit, ChangeDetectionStrategy,
  Component, ElementRef, EventEmitter, Input,
  OnChanges, Output, QueryList, SimpleChanges, ViewChild, ViewChildren
} from '@angular/core';

declare const $: any;

@Component({
  selector: 'sem-dropdown',
  templateUrl: './semantic-ui-dropdown.component.html',
  styleUrls: ['./semantic-ui-dropdown.component.scss'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class SemanticUiDropdownComponent implements AfterViewInit, OnChanges {
  @ViewChild('dropdown') dropdown: ElementRef;

  @Input() placeholder = 'Choisir';
  @Input() inForm = false;
  @Input() display: any = null;
  @Input() link: any = null;
  @Input() class: string;
  @Input() openOver = true;

  @Input() data: any = [];
  @Output() dataChange: EventEmitter<any> = new EventEmitter();

  @Input() model: any = null;
  @Output() modelChange: EventEmitter<any> = new EventEmitter();

  @Output() onChange: EventEmitter<any> = new EventEmitter();

  @ViewChild('label') label: ElementRef;
  @ViewChildren('option') options: QueryList<ElementRef>;

  $dropdown: any;
  labelDisplayable = true;

  constructor() {
  }

  ngOnChanges(changes: SimpleChanges) {
    if (changes['model']) {
      if (this.$dropdown) {
        this.$dropdown.dropdown();
      }
    }
    if (changes['data']) {
      if (JSON.stringify(changes['data'].currentValue) !== JSON.stringify(changes['data'].previousValue)) {
        this.dataChange.next(this.data);
      }
    }
  }

  ngAfterViewInit() {
    this.$dropdown = $(this.dropdown.nativeElement).dropdown();
    this.labelDisplayable = !!this.label.nativeElement.innerText.trim().length;
    this.options.changes.subscribe(() => {
      this.$dropdown.dropdown('refresh');
      this.$dropdown.dropdown('set selected', this.model);
    });
  }

  onClick(value) {
    this.model = value[this.link];
    this.modelChange.next(this.model);
    this.onChange.emit(value);
  }

  onMouseover() {
    if (this.openOver) {
      this.$dropdown.dropdown('show');
    }
  }

  onMouseleave() {
    if (this.openOver) {
      this.$dropdown.dropdown('hide');
    }
  }
}
